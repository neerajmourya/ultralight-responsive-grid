/*
 * Ultralight Responsive Grid V5.0 - 12 columns responsive grid keeping the filesize light so that can be downloaded faster.
 * 
 * MIT License
 * 
 * Copyright (c) 2018 Neeraj Mourya <neerajmorya@gmail.com>
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
 
// Define columns, gutter and container width
$columns:12;
$gutter:15px;

//Define Screens with name, min-width, max-width
$smallScreen:s,0,575.98;
$mediumScreen:m,576,767.98,540;
$largeScreen:l,768,991.98,720;
$xLargeScreen:xl,992,1199.98,960;
$xxLargeScreen:xxl,1200,1599.98,1140;
$xxxLargeScreen:xxxl,1600,1920,1520;

//Add screens to the list
$screens: $smallScreen, $mediumScreen, $largeScreen, $xLargeScreen, $xxLargeScreen, $xxxLargeScreen;

* {    
    box-sizing: border-box;
}
html{
	overflow-y: auto;
	overflow-x: hidden;
}
html, body {
	width: 100%;
	margin: 0px;
	padding: 0px;
}
.cntr,.cntr-fluid{
	position: relative;
	width: 100%;
}
.cntr{
    max-width: 100%;
    margin: 0 auto;
}
.cntr .cntr, .cntr .cntr-fluid, .cntr-fluid .cntr, .cntr-fluid .cntr-fluid{
	margin:0;
}
.rw,.cl{
	position: relative;
	display: -ms-flexbox;
	display: flex;
	-ms-flex-wrap: wrap;
	flex-wrap: wrap;
}
.rw.out{
    width:auto;
    margin-left: -$gutter;
    margin-right: -$gutter;    
}
.cl {
    padding: 0 $gutter;
    flex:1;
    max-width:100%;
}
.rw.ngt>.cl {
    padding: 0;
}
.fulwid{
	width:100%;
	max-width:100%;
}
//Flex styles
.fdcol{
	flex-direction: column;
}
.fdrow{
	flex-direction: row;
}
.ais{
	align-items: flex-start;
}
.aic{
	align-items: center;
}
.aie{
	align-items: flex-end;
}
.aist{
	align-items: stretch;
}
.ass{
	align-self: flex-start;
}
.asc{
	align-self: center;
}
.ase{
	align-self: flex-end;
}
.asst{
	align-self: stretch;
}
.jcs{
	justify-content: flex-start;
}
.jcc{
	justify-content: center;
}
.jce{
	justify-content: flex-end;
}
.jcsa{
	justify-content: space-around;
}
.jcsb{
	justify-content: space-between;
}

img{
    max-width: 100%;
}

// placeholder to be extended by shw for all screens
%hidshw {
    display:none;
}
// display none for all shw initially for all screens
@for $i from 1 through length($screens) {
    $screen: nth($screens, $i);
    $name: nth($screen, 1); 
    .#{$name}shw{
        @extend %hidshw; // extending placeholder %hidshw
    }
}

// mixin to define styles for a screen
@mixin screenStyles($screen){
    $name: nth($screen, 1);    
    // exp, hid, shw classes for each screen
    .#{$name}exp, .#{$name}exp>*{
		width:100%;
	}
	.#{$name}hid{
		display:none;
	}
	.#{$name}shw{
		display:flex;
	}
	
    // columns styles by looping through the number of columns
    @for $col from 1 through $columns{
    	// Calculate the width of the column
        $width:($col * 100% / $columns);
        .#{$name}#{$col}{
            flex: 0 0 $width;
        }
        
        // pus, pul, off classes for each columns except last column
        @if $col!=$columns{
            .#{$name}ord#{$col}{
		        order:#{$col};
	        }
	        .#{$name}off#{$col}{
		        margin-left:$width;
	        }
        }
    }
    
    .#{$name}auto{
        flex:initial;
    }
    .#{$name}ordfirst{
        order:-1;
    }
    .#{$name}ordlast{
        order:13;
    }
}

// call mixin screenStyles to define styles for first screen
@include screenStyles(nth($screens, 1));
// call mixin screenStyles to define styles for screens from 2nd to last
@for $i from 2 through length($screens) {
    $screen: nth($screens, $i); 
    $minWidth: nth($screen, 2);
    $cntrWidth: nth($screen, 4);    
    @media screen and (min-width:#{$minWidth}px){    	
    	.cntr{
			width:#{$cntrWidth}px;
		}
        @include screenStyles($screen);  
    }
}

// placeholder to be extended by onlyhid classes for all screens
%shwonlyhid {
    display:flex;
}
// display block for all onlyhid initially for all screens
@for $i from 1 through length($screens) {
    $screen: nth($screens, $i);
    $name: nth($screen, 1); 
    .#{$name}onlyhid{
        @extend %shwonlyhid; // extending placeholder %shwonlyhid
    }
}

// placeholder to be extended by onlyshw classes for all screens
%hidonlyshw {
    display:none;
}
// display none for all onlyshw initially for all screens
@for $i from 1 through length($screens) {
    $screen: nth($screens, $i);
    $name: nth($screen, 1); 
    .#{$name}onlyshw{
        @extend %hidonlyshw; // extending placeholder %hidonlyshw
    }
}

// onlyhid, onlyshw classes for each screen
@for $i from 1 through length($screens) {
    $screen: nth($screens, $i);
    $minWidth: nth($screen, 2);
    $maxWidth: nth($screen, 3);
    $name: nth($screen, 1); 
    @media screen and (min-width:#{$minWidth}px) and (maxWidth:#{$maxWidth}px){
        .#{$name}onlyhid{
            display:none;
        }
        .#{$name}onlyshw{
            display:flex;
        }
    }
}
